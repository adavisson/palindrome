{
  "{\"sourceRoot\":\"/Users/adavisson/Documents/projects/tdd-palindrome/test\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/adavisson/Documents/projects/tdd-palindrome\",\"filename\":\"/Users/adavisson/Documents/projects/tdd-palindrome/test/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/adavisson/Documents/projects/tdd-palindrome\",\"plugins\":[],\"presets\":[]}:7.8.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/adavisson/Documents/projects/tdd-palindrome/test",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/adavisson/Documents/projects/tdd-palindrome",
      "filename": "/Users/adavisson/Documents/projects/tdd-palindrome/test/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/adavisson/Documents/projects/tdd-palindrome",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/adavisson/Documents/projects/tdd-palindrome/test/test.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/adavisson/Documents/projects/tdd-palindrome/test/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/adavisson/Documents/projects/tdd-palindrome/test",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "let expect = require(\"chai\").expect;\n\nlet palindromeTest = require(\"../app/palindrome\");\n\ndescribe(\"Palindrome Test\", function () {\n  it(\"returns 'Palindrome' when the word is a palindrome\", function () {\n    let test1 = palindromeTest.palindromeTest(\"level\");\n    let test2 = palindromeTest.palindromeTest(\"RaCecar\");\n    let test3 = palindromeTest.palindromeTest(\"KAYAK\");\n    expect(test1).to.equal(\"Palindrome\");\n    expect(test2).to.equal(\"Palindrome\");\n    expect(test3).to.equal(\"Palindrome\");\n  });\n  it(\"returns 'Not a Palindrome' when the word is not a palindorome\", function () {\n    let test1 = palindromeTest.palindromeTest(\"hello\");\n    let test2 = palindromeTest.palindromeTest(\"RaCeDog\");\n    let test3 = palindromeTest.palindromeTest(\"GOODBYE\");\n    expect(test1).to.equal(\"Not a Palindrome\");\n    expect(test1).to.equal(\"Not a Palindrome\");\n    expect(test1).to.equal(\"Not a Palindrome\");\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiZXhwZWN0IiwicmVxdWlyZSIsInBhbGluZHJvbWVUZXN0IiwiZGVzY3JpYmUiLCJpdCIsInRlc3QxIiwidGVzdDIiLCJ0ZXN0MyIsInRvIiwiZXF1YWwiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFFLE1BQUYsQ0FBUCxDQUFpQkQsTUFBOUI7O0FBQ0EsSUFBSUUsY0FBYyxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBNUI7O0FBRUFFLFFBQVEsQ0FBQyxpQkFBRCxFQUFvQixZQUFVO0FBQ3BDQyxFQUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsWUFBVTtBQUNqRSxRQUFJQyxLQUFLLEdBQUdILGNBQWMsQ0FBQ0EsY0FBZixDQUE4QixPQUE5QixDQUFaO0FBQ0EsUUFBSUksS0FBSyxHQUFHSixjQUFjLENBQUNBLGNBQWYsQ0FBOEIsU0FBOUIsQ0FBWjtBQUNBLFFBQUlLLEtBQUssR0FBR0wsY0FBYyxDQUFDQSxjQUFmLENBQThCLE9BQTlCLENBQVo7QUFFQUYsSUFBQUEsTUFBTSxDQUFDSyxLQUFELENBQU4sQ0FBY0csRUFBZCxDQUFpQkMsS0FBakIsQ0FBdUIsWUFBdkI7QUFDQVQsSUFBQUEsTUFBTSxDQUFDTSxLQUFELENBQU4sQ0FBY0UsRUFBZCxDQUFpQkMsS0FBakIsQ0FBdUIsWUFBdkI7QUFDQVQsSUFBQUEsTUFBTSxDQUFDTyxLQUFELENBQU4sQ0FBY0MsRUFBZCxDQUFpQkMsS0FBakIsQ0FBdUIsWUFBdkI7QUFDRCxHQVJDLENBQUY7QUFVQUwsRUFBQUEsRUFBRSxDQUFDLCtEQUFELEVBQWtFLFlBQVU7QUFDNUUsUUFBSUMsS0FBSyxHQUFHSCxjQUFjLENBQUNBLGNBQWYsQ0FBOEIsT0FBOUIsQ0FBWjtBQUNBLFFBQUlJLEtBQUssR0FBR0osY0FBYyxDQUFDQSxjQUFmLENBQThCLFNBQTlCLENBQVo7QUFDQSxRQUFJSyxLQUFLLEdBQUdMLGNBQWMsQ0FBQ0EsY0FBZixDQUE4QixTQUE5QixDQUFaO0FBRUFGLElBQUFBLE1BQU0sQ0FBQ0ssS0FBRCxDQUFOLENBQWNHLEVBQWQsQ0FBaUJDLEtBQWpCLENBQXVCLGtCQUF2QjtBQUNBVCxJQUFBQSxNQUFNLENBQUNLLEtBQUQsQ0FBTixDQUFjRyxFQUFkLENBQWlCQyxLQUFqQixDQUF1QixrQkFBdkI7QUFDQVQsSUFBQUEsTUFBTSxDQUFDSyxLQUFELENBQU4sQ0FBY0csRUFBZCxDQUFpQkMsS0FBakIsQ0FBdUIsa0JBQXZCO0FBQ0QsR0FSQyxDQUFGO0FBU0QsQ0FwQk8sQ0FBUiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWRhdmlzc29uL0RvY3VtZW50cy9wcm9qZWN0cy90ZGQtcGFsaW5kcm9tZS90ZXN0Iiwic291cmNlc0NvbnRlbnQiOlsibGV0IGV4cGVjdCA9IHJlcXVpcmUgKFwiY2hhaVwiKS5leHBlY3Q7XG5sZXQgcGFsaW5kcm9tZVRlc3QgPSByZXF1aXJlKFwiLi4vYXBwL3BhbGluZHJvbWVcIik7XG5cbmRlc2NyaWJlKFwiUGFsaW5kcm9tZSBUZXN0XCIsIGZ1bmN0aW9uKCl7XG4gIGl0KFwicmV0dXJucyAnUGFsaW5kcm9tZScgd2hlbiB0aGUgd29yZCBpcyBhIHBhbGluZHJvbWVcIiwgZnVuY3Rpb24oKXtcbiAgICBsZXQgdGVzdDEgPSBwYWxpbmRyb21lVGVzdC5wYWxpbmRyb21lVGVzdChcImxldmVsXCIpO1xuICAgIGxldCB0ZXN0MiA9IHBhbGluZHJvbWVUZXN0LnBhbGluZHJvbWVUZXN0KFwiUmFDZWNhclwiKTtcbiAgICBsZXQgdGVzdDMgPSBwYWxpbmRyb21lVGVzdC5wYWxpbmRyb21lVGVzdChcIktBWUFLXCIpO1xuXG4gICAgZXhwZWN0KHRlc3QxKS50by5lcXVhbChcIlBhbGluZHJvbWVcIik7XG4gICAgZXhwZWN0KHRlc3QyKS50by5lcXVhbChcIlBhbGluZHJvbWVcIik7XG4gICAgZXhwZWN0KHRlc3QzKS50by5lcXVhbChcIlBhbGluZHJvbWVcIik7XG4gIH0pO1xuXG4gIGl0KFwicmV0dXJucyAnTm90IGEgUGFsaW5kcm9tZScgd2hlbiB0aGUgd29yZCBpcyBub3QgYSBwYWxpbmRvcm9tZVwiLCBmdW5jdGlvbigpe1xuICAgIGxldCB0ZXN0MSA9IHBhbGluZHJvbWVUZXN0LnBhbGluZHJvbWVUZXN0KFwiaGVsbG9cIik7XG4gICAgbGV0IHRlc3QyID0gcGFsaW5kcm9tZVRlc3QucGFsaW5kcm9tZVRlc3QoXCJSYUNlRG9nXCIpO1xuICAgIGxldCB0ZXN0MyA9IHBhbGluZHJvbWVUZXN0LnBhbGluZHJvbWVUZXN0KFwiR09PREJZRVwiKTtcblxuICAgIGV4cGVjdCh0ZXN0MSkudG8uZXF1YWwoXCJOb3QgYSBQYWxpbmRyb21lXCIpO1xuICAgIGV4cGVjdCh0ZXN0MSkudG8uZXF1YWwoXCJOb3QgYSBQYWxpbmRyb21lXCIpO1xuICAgIGV4cGVjdCh0ZXN0MSkudG8uZXF1YWwoXCJOb3QgYSBQYWxpbmRyb21lXCIpO1xuICB9KTtcbn0pOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "expect",
        "require",
        "palindromeTest",
        "describe",
        "it",
        "test1",
        "test2",
        "test3",
        "to",
        "equal"
      ],
      "mappings": "AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAE,MAAF,CAAP,CAAiBD,MAA9B;;AACA,IAAIE,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA5B;;AAEAE,QAAQ,CAAC,iBAAD,EAAoB,YAAU;AACpCC,EAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAU;AACjE,QAAIC,KAAK,GAAGH,cAAc,CAACA,cAAf,CAA8B,OAA9B,CAAZ;AACA,QAAII,KAAK,GAAGJ,cAAc,CAACA,cAAf,CAA8B,SAA9B,CAAZ;AACA,QAAIK,KAAK,GAAGL,cAAc,CAACA,cAAf,CAA8B,OAA9B,CAAZ;AAEAF,IAAAA,MAAM,CAACK,KAAD,CAAN,CAAcG,EAAd,CAAiBC,KAAjB,CAAuB,YAAvB;AACAT,IAAAA,MAAM,CAACM,KAAD,CAAN,CAAcE,EAAd,CAAiBC,KAAjB,CAAuB,YAAvB;AACAT,IAAAA,MAAM,CAACO,KAAD,CAAN,CAAcC,EAAd,CAAiBC,KAAjB,CAAuB,YAAvB;AACD,GARC,CAAF;AAUAL,EAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAU;AAC5E,QAAIC,KAAK,GAAGH,cAAc,CAACA,cAAf,CAA8B,OAA9B,CAAZ;AACA,QAAII,KAAK,GAAGJ,cAAc,CAACA,cAAf,CAA8B,SAA9B,CAAZ;AACA,QAAIK,KAAK,GAAGL,cAAc,CAACA,cAAf,CAA8B,SAA9B,CAAZ;AAEAF,IAAAA,MAAM,CAACK,KAAD,CAAN,CAAcG,EAAd,CAAiBC,KAAjB,CAAuB,kBAAvB;AACAT,IAAAA,MAAM,CAACK,KAAD,CAAN,CAAcG,EAAd,CAAiBC,KAAjB,CAAuB,kBAAvB;AACAT,IAAAA,MAAM,CAACK,KAAD,CAAN,CAAcG,EAAd,CAAiBC,KAAjB,CAAuB,kBAAvB;AACD,GARC,CAAF;AASD,CApBO,CAAR",
      "sourceRoot": "/Users/adavisson/Documents/projects/tdd-palindrome/test",
      "sourcesContent": [
        "let expect = require (\"chai\").expect;\nlet palindromeTest = require(\"../app/palindrome\");\n\ndescribe(\"Palindrome Test\", function(){\n  it(\"returns 'Palindrome' when the word is a palindrome\", function(){\n    let test1 = palindromeTest.palindromeTest(\"level\");\n    let test2 = palindromeTest.palindromeTest(\"RaCecar\");\n    let test3 = palindromeTest.palindromeTest(\"KAYAK\");\n\n    expect(test1).to.equal(\"Palindrome\");\n    expect(test2).to.equal(\"Palindrome\");\n    expect(test3).to.equal(\"Palindrome\");\n  });\n\n  it(\"returns 'Not a Palindrome' when the word is not a palindorome\", function(){\n    let test1 = palindromeTest.palindromeTest(\"hello\");\n    let test2 = palindromeTest.palindromeTest(\"RaCeDog\");\n    let test3 = palindromeTest.palindromeTest(\"GOODBYE\");\n\n    expect(test1).to.equal(\"Not a Palindrome\");\n    expect(test1).to.equal(\"Not a Palindrome\");\n    expect(test1).to.equal(\"Not a Palindrome\");\n  });\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1580361734611
  },
  "{\"sourceRoot\":\"/Users/adavisson/Documents/projects/tdd-palindrome/app\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/adavisson/Documents/projects/tdd-palindrome\",\"filename\":\"/Users/adavisson/Documents/projects/tdd-palindrome/app/palindrome.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/adavisson/Documents/projects/tdd-palindrome\",\"plugins\":[],\"presets\":[]}:7.8.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/adavisson/Documents/projects/tdd-palindrome/app",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/adavisson/Documents/projects/tdd-palindrome",
      "filename": "/Users/adavisson/Documents/projects/tdd-palindrome/app/palindrome.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/adavisson/Documents/projects/tdd-palindrome",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/adavisson/Documents/projects/tdd-palindrome/app/palindrome.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/adavisson/Documents/projects/tdd-palindrome/app/palindrome.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/adavisson/Documents/projects/tdd-palindrome/app",
        "sourceFileName": "palindrome.js"
      }
    },
    "ast": null,
    "code": "const palindromeTest = input => {\n  const palWord = input.split(\"\");\n\n  if (palWord.length <= 1) {\n    return \"Palindrome\";\n  }\n\n  const first = palWord.shift();\n  const last = palWord.pop();\n\n  if (first == last) {\n    return palindromeTest(palWord.join(\"\"));\n  } else {\n    return \"Not a Palindrome\";\n  }\n};\n\nexport default palindromeTest;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhbGluZHJvbWUuanMiXSwibmFtZXMiOlsicGFsaW5kcm9tZVRlc3QiLCJpbnB1dCIsInBhbFdvcmQiLCJzcGxpdCIsImxlbmd0aCIsImZpcnN0Iiwic2hpZnQiLCJsYXN0IiwicG9wIiwiam9pbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsY0FBYyxHQUFJQyxLQUFELElBQVc7QUFDaEMsUUFBTUMsT0FBTyxHQUFHRCxLQUFLLENBQUNFLEtBQU4sQ0FBWSxFQUFaLENBQWhCOztBQUVBLE1BQUlELE9BQU8sQ0FBQ0UsTUFBUixJQUFrQixDQUF0QixFQUF3QjtBQUN0QixXQUFPLFlBQVA7QUFDRDs7QUFFRCxRQUFNQyxLQUFLLEdBQUdILE9BQU8sQ0FBQ0ksS0FBUixFQUFkO0FBQ0EsUUFBTUMsSUFBSSxHQUFHTCxPQUFPLENBQUNNLEdBQVIsRUFBYjs7QUFFQSxNQUFJSCxLQUFLLElBQUlFLElBQWIsRUFBa0I7QUFDaEIsV0FBT1AsY0FBYyxDQUFDRSxPQUFPLENBQUNPLElBQVIsQ0FBYSxFQUFiLENBQUQsQ0FBckI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLGtCQUFQO0FBQ0Q7QUFDRixDQWZEOztBQWlCQSxlQUFlVCxjQUFmIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hZGF2aXNzb24vRG9jdW1lbnRzL3Byb2plY3RzL3RkZC1wYWxpbmRyb21lL2FwcCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhbGluZHJvbWVUZXN0ID0gKGlucHV0KSA9PiB7XG4gIGNvbnN0IHBhbFdvcmQgPSBpbnB1dC5zcGxpdChcIlwiKTtcblxuICBpZiAocGFsV29yZC5sZW5ndGggPD0gMSl7XG4gICAgcmV0dXJuIFwiUGFsaW5kcm9tZVwiO1xuICB9XG5cbiAgY29uc3QgZmlyc3QgPSBwYWxXb3JkLnNoaWZ0KCk7XG4gIGNvbnN0IGxhc3QgPSBwYWxXb3JkLnBvcCgpO1xuXG4gIGlmIChmaXJzdCA9PSBsYXN0KXtcbiAgICByZXR1cm4gcGFsaW5kcm9tZVRlc3QocGFsV29yZC5qb2luKFwiXCIpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJOb3QgYSBQYWxpbmRyb21lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFsaW5kcm9tZVRlc3Q7Il19",
    "map": {
      "version": 3,
      "sources": [
        "palindrome.js"
      ],
      "names": [
        "palindromeTest",
        "input",
        "palWord",
        "split",
        "length",
        "first",
        "shift",
        "last",
        "pop",
        "join"
      ],
      "mappings": "AAAA,MAAMA,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAMC,OAAO,GAAGD,KAAK,CAACE,KAAN,CAAY,EAAZ,CAAhB;;AAEA,MAAID,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAwB;AACtB,WAAO,YAAP;AACD;;AAED,QAAMC,KAAK,GAAGH,OAAO,CAACI,KAAR,EAAd;AACA,QAAMC,IAAI,GAAGL,OAAO,CAACM,GAAR,EAAb;;AAEA,MAAIH,KAAK,IAAIE,IAAb,EAAkB;AAChB,WAAOP,cAAc,CAACE,OAAO,CAACO,IAAR,CAAa,EAAb,CAAD,CAArB;AACD,GAFD,MAEO;AACL,WAAO,kBAAP;AACD;AACF,CAfD;;AAiBA,eAAeT,cAAf",
      "sourceRoot": "/Users/adavisson/Documents/projects/tdd-palindrome/app",
      "sourcesContent": [
        "const palindromeTest = (input) => {\n  const palWord = input.split(\"\");\n\n  if (palWord.length <= 1){\n    return \"Palindrome\";\n  }\n\n  const first = palWord.shift();\n  const last = palWord.pop();\n\n  if (first == last){\n    return palindromeTest(palWord.join(\"\"));\n  } else {\n    return \"Not a Palindrome\";\n  }\n}\n\nexport default palindromeTest;"
      ]
    },
    "sourceType": "module",
    "mtime": 1580361913068
  }
}